# See http://logstash.net/docs/latest/ for documentation on how to configure Logstash.

input {
    file {
     path => "/host/var/log/*access*.log"
     type => "apache"
	 codec => multiline {
		pattern => "^%{IPORHOST} "
		negate => true
		what => previous
     }
    }
	file {
     path => "/host/var/log/*haproxy*.log"
     type => "haproxy"
	 codec => multiline {
		pattern => "^%{SYSLOGTIMESTAMP} "
		negate => true
		what => previous
     }
    }
	file {
        path => "/host/var/log/*jboss*.log"
		type => "jboss"
        codec => multiline {
		  pattern => "^(%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}) "
		  negate => true
		  what => previous
		}
    }
    file {
        path => "/host/var/log/*.log"
		type => "default"
        codec => multiline {
		  pattern => "^%{TIMESTAMP_ISO8601} "
		  negate => true
		  what => previous
		}
    }
}

filter {
    if [type] == "apache" {
      grok {
        match => [
                      "message", "%{COMBINEDAPACHELOG}",
                      "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
                 ]
        break_on_match => false
      }
	  date {
          match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
          target => ["datetime"]
      }
      ruby {
          code => "require 'date';
          event['Timestamp'] = DateTime.parse(event['datetime'].to_iso8601).strftime('%Y-%m-%d %H:%M:%S.%L')"
      }
	} else if [type] == "haproxy" {
         grok {
           match => [
                      "message", "%{HAPROXYHTTP}",
                      "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
                   ]
                   break_on_match => false
         }
		 date {
           match => [ 'accept_date', 'dd/MMM/yyyy:HH:mm:ss.SSS']
           target => ["datetime"]
          }
         ruby {
           code => "require 'date';
           event['Timestamp'] = DateTime.parse(event['datetime'].to_iso8601).strftime('%Y-%m-%d %H:%M:%S.%L')"
          }
      } else if [type] == "jboss" {
         grok {
           match => [
                      "message", "(?<jtime>%{YEAR}/%{MONTHNUM}/%{MONTHDAY} %{HOUR}:%{MINUTE}:%{SECOND}) %{LOGLEVEL:level} (?<logmessage>(.|\r|\n)*)",
                      "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
                   ]
                   break_on_match => false
         }
		 date {
           match => [ 'jtime', 'YYYY/MM/dd HH:mm:ss,SSS']
           target => ["datetime"]
          }
		 ruby {
           code => "require 'date';
           event['Timestamp'] = DateTime.parse(event['datetime'].to_iso8601).strftime('%Y-%m-%d %H:%M:%S.%L')"
          }
       } else if [type] == "default" {
        grok {
           match => [
             "message", "%{TIMESTAMP_ISO8601:Timestamp} %{LOGLEVEL:level} (?m)%{GREEDYDATA:logmessage}",
             "path","%{GREEDYDATA}/%{GREEDYDATA:filename}\.log"
           ]
          break_on_match => false
        }
      }	
	  ruby {
	    code => "require 'base64';
		event['enccred'] = Base64.encode64(ENV['DOCKER_DORADUS_USER'].to_s + ':' + ENV['DOCKER_DORADUS_PWD'].to_s).gsub(/\n/, '')
		event['post_url'] = ENV['DORADUS_HOST'].to_s + ':' + ENV['DORADUS_PORT'].to_s + '/LoggingApplication/logs_' + ENV['DOCKER_APP_NAME'].to_s + '_' + ENV['DOCKER_NAMESPACE'].to_s"
      }
}

output {
    if [type] == "apache" {
		batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "haproxy" {
		batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "jboss" {
		batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogLevel": "%{level}","LogMessage": "%{logmessage}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
	} else if [type] == "default" {
        batched_http {
			http_method => "post"
			url => "%{post_url}"
			format => "message"
			headers => ["Authorization","Basic %{enccred}"]
			content_type => "application/json"
			batched => '{ "doc": { "Timestamp": "%{Timestamp}", "LogLevel": "%{level}","LogMessage": "%{message}", "Source": "%{filename}" } }'
			message => '{"batch": { "docs": [ %{batched} ] } }'
		}
      }	
}
